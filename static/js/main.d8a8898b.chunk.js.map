{"version":3,"sources":["components/helpers/gameHelpers.js","components/Tetris/StyledTetris.js","components/helpers/tetrominos.js","hoocs/usePlayer.js","hoocs/useStage.js","components/Stage/StyledStage.js","components/Cell/StyleCell.js","components/Cell/Cell.jsx","components/Stage/Stage.jsx","components/Display/StyledDisplay.js","components/Display/Display.jsx","components/StartButton/StyledStartButton.js","components/StartButton/StartButton.jsx","components/Tetris/Tetris.jsx","hoocs/useGameStatus.js","hoocs/useInterval.js","App.js","serviceWorker.js","index.js","image/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prevState","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateState","prevStage","newStage","cell","forEach","value","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d8a8898b.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () => {\r\n    return Array.from(Array(STAGE_HEIGHT), () =>\r\n        new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n    )\r\n};\r\n\r\n\r\nexport const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\r\n    for(let y = 0; y < player.tetromino.length; y += 1) {\r\n        for(let x = 0; x < player.tetromino[y].length; x += 1) {\r\n\r\n            if(player.tetromino[y][x] !== 0) {\r\n                if(\r\n                !stage[y + player.pos.y + moveY] ||\r\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                 stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== \"clear\"\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n};","import styled from \"styled-components\";\r\nimport bgImage from \"./../../image/bg.png\";\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`;\r\n\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n    \r\n    \r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n\r\n`;","\r\nexport const TETROMINOS = {\r\n    0: { shape: [[0]], color: \"0, 0, 0\"},\r\n    I: {\r\n        shape: [\r\n            [0, \"I\", 0, 0],\r\n            [0, \"I\", 0, 0],\r\n            [0, \"I\", 0, 0],\r\n            [0, \"I\", 0, 0]\r\n        ],\r\n        color: \"80, 227, 230\"\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, \"J\",  0],\r\n            [0, \"J\",  0],\r\n            [\"J\", \"J\",  0]\r\n        ],\r\n        color: \"36, 95, 223\"\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, \"L\",  0],\r\n            [0, \"L\",  0],\r\n            [0, \"L\",  \"L\"]\r\n        ],\r\n        color: \"223, 173, 36\"\r\n    },\r\n    O: {\r\n        shape: [\r\n            [\"O\", \"O\"],\r\n            [\"O\", \"O\"]\r\n        ],\r\n        color: \"223, 217, 36\"\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, \"S\",  \"S\"],\r\n            [\"S\", \"S\",  0],\r\n            [0, 0,  0]\r\n        ],\r\n        color: \"48, 211, 36\"\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            [\"T\", \"T\",  \"T\"],\r\n            [0, \"T\",  0]\r\n        ],\r\n        color: \"132, 61, 198\"\r\n    },\r\n    Z: {\r\n        shape: [\r\n            [\"Z\", \"Z\", 0],\r\n            [0, \"Z\",  \"Z\"],\r\n            [0, 0,  0]\r\n        ],\r\n        color: \"227, 78, 78\"\r\n    },\r\n\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = \"IJLOSTZ\";\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n\r\n    return TETROMINOS[randTetromino];\r\n};","import { useState, useCallback } from \"react\";\r\nimport { randomTetromino, TETROMINOS } from \"../components/helpers/tetrominos\";\r\nimport {checkCollision, STAGE_WIDTH} from \"../components/helpers/gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: {x: 0, y: 0},\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false\r\n\r\n    });\r\n\r\n    const rotate = (matrix, dir) => {\r\n        const rotatedTetro = matrix.map((_, index) =>\r\n            matrix.map(col => col[index])\r\n        );\r\n\r\n        if(dir > 0) return rotatedTetro.map(row => row.reverse());\r\n        return rotatedTetro.reverse();\r\n    };\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n        while(checkCollision(clonedPlayer, stage, {x: 0, y: 0})) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if(offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir);\r\n                clonedPlayer.pos.x = pos;\r\n                return\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer);\r\n    };\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prevState => ({\r\n            ...prevState,\r\n            pos: {x: (prevState.pos.x += x), y: (prevState.pos.y += y)},\r\n            collided\r\n        }))\r\n    };\r\n\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: {x: STAGE_WIDTH / 2 - 2, y: 0},\r\n            tetromino: randomTetromino().shape,\r\n            collided: false\r\n        })\r\n    }, []);\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../components/helpers/gameHelpers\";\r\n\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        const sweepRows = newStage =>\r\n            newStage.reduce((ack, row) => {\r\n                if(row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n                    ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n                    return ack;\r\n                }\r\n                ack.push(row);\r\n                return ack;\r\n            }, []);\r\n\r\n        const updateState = prevStage => {\r\n            const newStage = prevStage.map(row =>\r\n\r\n                row.map(cell => (cell[1] === \"clear\" ? [0, \"clear\"]: cell))\r\n            );\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if(value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? \"merged\" : \"clear\"}`\r\n                        ];\r\n                    }\r\n                });\r\n            });\r\n\r\n            if(player.collided) {\r\n                resetPlayer();\r\n                return sweepRows(newStage);\r\n            }\r\n\r\n            return newStage\r\n        };\r\n\r\n        setStage(prev => updateState(prev));\r\n    }, [player, resetPlayer]);\r\n\r\n    return [stage, setStage, rowsCleared];\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns : repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, .8);\r\n    border: ${props => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\r\n    border-bottom-color: rgba(${props => props.color}, .1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, .3);\r\n\r\n`;","import React from \"react\";\r\n\r\nimport { StyledCell } from \"./StyleCell\";\r\nimport { TETROMINOS } from \"../helpers/tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={ type } color={TETROMINOS[type].color} />\r\n);\r\n\r\nexport default React.memo(Cell);","import React from \"react\";\r\nimport { StyledStage } from \"./StyledStage\";\r\n\r\nimport Cell from \"./../Cell/Cell\";\r\n\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={ stage[0].length } height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) =>\r\n            <Cell key={ x } type={ cell[0] }/>))\r\n        }\r\n    </StyledStage>\r\n);\r\n\r\nexport default Stage;","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? \"red\" : \"#999\")};\r\n    background: #000;\r\n    font-family: Pixel, Arial, sans-serif;\r\n    font-size: 0.8rem;\r\n`;","import React from \"react\";\r\nimport { StyledDisplay } from \"./StyledDisplay\";\r\n\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver={ gameOver } >\r\n        { text }\r\n    </StyledDisplay>\r\n);\r\n\r\nexport default Display;","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.div`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, sans-serif;\r\n    font-size: 1rem;\r\n    outline: 0;\r\n    cursor: pointer;\r\n\r\n`;","import React from \"react\";\r\nimport { StyledStartButton } from \"./StyledStartButton\";\r\n\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick={ callback }>\r\n        Start Game\r\n    </StyledStartButton>\r\n);\r\n\r\nexport default StartButton;","import React, { useState } from \"react\";\r\nimport { createStage, checkCollision } from \"../helpers/gameHelpers\";\r\nimport { StyledTetris, StyledTetrisWrapper } from \"./StyledTetris\";\r\nimport { usePlayer } from \"../../hoocs/usePlayer\";\r\nimport { useStage } from \"../../hoocs/useStage\";\r\nimport { useInterval } from \"../../hoocs/useInterval\";\r\nimport { useGameStatus } from \"../../hoocs/useGameStatus\";\r\n\r\nimport Stage from \"./../Stage/Stage\";\r\nimport Display from \"./../Display/Display\";\r\nimport StartButton from \"./../StartButton/StartButton\";\r\n\r\n\r\nconst Tetris = () => {\r\n\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleard] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleard);\r\n\r\n\r\n    const movePlayer = dir => {\r\n        if(!checkCollision(player, stage, {x: dir, y: 0})) {\r\n            updatePlayerPos({x: dir, y: 0})\r\n        }\r\n    };\r\n\r\n    const startGame = () => {\r\n        setStage(createStage);\r\n        setDropTime(1000);\r\n        resetPlayer();\r\n        setGameOver(false);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    };\r\n\r\n    const drop = () => {\r\n        if(rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            setDropTime(1000 / (level + 1) + 200);\r\n        }\r\n\r\n        if(!checkCollision(player, stage, {x: 0, y: 1})) {\r\n            updatePlayerPos({x: 0, y: 1, collided: false})\r\n        } else {\r\n            if(player.pos.y < 1) {\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({x: 0, y: 0, collided: true})\r\n        }\r\n    };\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n      if(!gameOver) {\r\n          if(keyCode === 40) {\r\n              setDropTime(1000 / (level + 1) + 200);\r\n          }\r\n      }\r\n    };\r\n\r\n    const dropPlayer = () => {\r\n        setDropTime(null);\r\n        drop();\r\n    };\r\n\r\n    const move = ({ keyCode }) => {\r\n        if(!gameOver) {\r\n            if(keyCode === 37) {\r\n                movePlayer(-1);\r\n            } else if (keyCode === 39) {\r\n                movePlayer(1);\r\n            } else if (keyCode === 40) {\r\n                dropPlayer();\r\n            } else if (keyCode === 38) {\r\n                playerRotate(stage, 1)\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    useInterval(() => {\r\n        drop()\r\n    }, dropTime);\r\n\r\n\r\n    return (\r\n        <StyledTetrisWrapper\r\n            role=\"button\"\r\n            tabIndex=\"0\"\r\n            onKeyDown={e => move(e)}\r\n            onKeyUp={ keyUp }\r\n\r\n        >\r\n            <StyledTetris>\r\n                <Stage stage={ stage } />\r\n                <aside>\r\n                    {gameOver ?\r\n                        (<Display gameOver={ gameOver } text=\"Game Over\" />\r\n                        ):(\r\n                        <div>\r\n                            <Display text={`Score: ${score}`} />\r\n                            <Display text={`Rows: ${rows}`} />\r\n                            <Display text={`Level: ${level}`} />\r\n                        </div>\r\n                        )}\r\n                    <StartButton callback={ startGame }/>\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        if(rowsCleared > 0) {\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n\r\n        }\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score]);\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n};","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n        if (delay !== null) {\r\n            const id = setInterval(tick, delay);\r\n            return () => {\r\n                clearInterval(id);\r\n            };\r\n        }\r\n    }, [delay]);\r\n}","import React from 'react';\nimport Tetris from \"./components/Tetris/Tetris\";\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Tetris />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}